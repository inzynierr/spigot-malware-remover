package net.inzynierr.malware_remover;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.JarOutputStream;
import java.util.regex.Pattern;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;

public final class MalwareRemoverApplication {

  static final Pattern BLACKLISTED_FILES = Pattern.compile("(javassist|.l(\\d+|_ignore)|L\\d+)");

  public static void main(String[] args) throws IOException {
    if (args.length != 1) {
      System.err.println("Usage: trash-malware-remover.jar <input_directory_path>");
      return;
    }

    var input = Paths.get(args[0]);
    if (!Files.exists(input) || !Files.isDirectory(input)) {
      System.err.println("The input directory doesn't even exists.");
      return;
    }

    for (var file : scanJarFiles(input)) {
      System.out.printf("Processing %s%n", file.getAbsolutePath());
      patchJarFile(file);
    }
  }

  private static List<File> scanJarFiles(Path input) throws IOException {
    var files = new ArrayList<File>();
    Files.walkFileTree(input, new SimpleFileVisitor<>() {

      @Override
      public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {
        if (attributes.isRegularFile() && Files.probeContentType(file).equals("application/java-archive")) {
          files.add(file.toFile());
        }

        return FileVisitResult.CONTINUE;
      }
    });
    return files;
  }

  private static void patchJarFile(File file) throws IOException {
    var written = new HashMap<String, byte[]>();
    try (var jarFile = new JarFile(file)) {
      var enumeration = jarFile.entries();
      while (enumeration.hasMoreElements()) {
        var element = enumeration.nextElement();
        if (element.isDirectory() || BLACKLISTED_FILES.matcher(element.getName()).find()) {
          continue;
        }

        var data = jarFile.getInputStream(element).readAllBytes();
        if (element.getName().endsWith(".class")) {
          var reader = new ClassReader(data);
          var writer = new ClassWriter(0);
          reader.accept(new MalwareClassVisitor(writer), 0);
          data = writer.toByteArray();
        }

        written.put(element.getName(), data);
      }
    }

    try (var output = new JarOutputStream(new FileOutputStream(file))) {
      for (var entry : written.entrySet()) {
        output.putNextEntry(new JarEntry(entry.getKey()));
        output.write(entry.getValue());
      }
    }
  }
}
